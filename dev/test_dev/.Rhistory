library(shiny); runApp('dev/test_dev/test-mod_plots_density.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
runApp('test-mod_plots_density.R')
library(highcharter)
library(DAPAR)
ui <- fluidPage(
mod_plots_density_ui('plots_density')
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output, session) {
library(DAPARdata)
data("Exp1_R25_prot")
# obj est un msnset
callModule(mod_plots_density_server,'plots_density',
obj = Exp1_R25_prot)
}
shinyApp(ui=ui, server=server)
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
palette <- (RColorBrewer::brewer.pal(8,"Dark2"))[1:length(unique(legend))]
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
obj <- Exp1_R25_prot
# settings <- rv.prostar$settings()
# rv.prostar$settings()$examplePalette
# rv.prostar$settings()$legendForSamples
legend <- Biobase::pData(obj)[,"Condition"]
palette <- rep(RColorBrewer::brewer.pal(8,"Dark2"),[1:length(unique(legend))])
legend
palette <- rep(RColorBrewer::brewer.pal(8,"Dark2"),length(unique(legend)))
palette
length(unique(legend))
RColorBrewer::brewer.pal(8,"Dark2")[1:length(unique(legend))]
colnames(Biobase::pData(obj))
as.vector(apply(as.data.frame(Biobase::pData(obj)[,"Condition"]), 1, function(x) paste(x, collapse="_")))
as.vector(apply(as.data.frame(Biobase::pData(obj)[,"Bio.rep"]), 1, function(x) paste(x, collapse="_")))
as.vector(apply(as.data.frame(Biobase::pData(obj)[,"Bio.Rep"]), 1, function(x) paste(x, collapse="_")))
# settings <- rv.prostar$settings()
# rv.prostar$settings()$examplePalette
# rv.prostar$settings()$legendForSamples
legend <- Biobase::pData(obj)[,"Condition"]
legend
palette <- RColorBrewer::brewer.pal(8,"Dark2")
palette
densityPlotD_HC(obj,
# rv.prostar$settings()$legendForSamples,
# rv.prostar$settings()$examplePalette
legend = legend,
palette = palette)
legend
qData <- Biobase::exprs(obj)
ncol(qData)
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
palette <- RColorBrewer::brewer.pal(ncol(),"Dark2")
palette
# settings <- rv.prostar$settings()
# rv.prostar$settings()$examplePalette
# rv.prostar$settings()$legendForSamples
legend <- Biobase::pData(obj)[,"Condition"]
legend
palette <- RColorBrewer::brewer.pal(ncol(),"Dark2")[1:length(unique(legend))]
1:length(unique(legend))
RColorBrewer::brewer.pal(ncol(),"Dark2")
RColorBrewer::brewer.pal(2,"Dark2")
palette <- RColorBrewer::brewer.pal(8,"Dark2")[1:length(unique(legend))]
palette
legend/length(unique(legend))
legend
length(legend)/length(unique(legend))
palette <-rep(palette, length(legend)/length(unique(legend)))
palette
palette <-rep(palette, each=length(legend)/length(unique(legend)))
palette <- RColorBrewer::brewer.pal(8,"Dark2")[1:length(unique(legend))]
palette <-rep(palette, each=length(legend)/length(unique(legend)))
palette
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
pData(obj)
Biobase::pData(obj)
getwd()
setwd("~/Github/2.0/Prostar2/")
#setwd("~/Github/2.0/Prostar2/dev/test_dev/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
setwd("~/Github/2.0/Prostar2/")
golem::add_module("plots_corr_matrix")
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
#' @param id shiny id
#' @param input internal
#' @param output internal
#' @param session internal
#'
#' @rdname mod_plots_corr_matrix
#'
#' @keywords internal
#' @export
#' @importFrom shiny NS tagList
mod_plots_corr_matrix_ui <- function(id){
ns <- NS(id)
tagList(
)
}
runApp('test-mod_plots_var_dist.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_density.R')
runApp('test-mod_plots_legend_colored_exprs.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_var_dist.R')
runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_legend_colored_exprs.R')
runApp('test-mod_plots_msnset_explorer.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_density.R')
runApp('test-mod_plots_corr_matrix.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
library(DAPARdata)
data("Exp1_R25_prot")
obj=Exp1_R25_prot
View(Exp1_R25_prot)
obj
obj$name
obj@experimentData@name
runApp('test-mod_plots_corr_matrix.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_corr_matrix.R')
setwd("~/Github/2.0/Prostar2/")
golem::add_module("plots_group_mv")
runApp('dev/test_dev/test-mod_plots_group_mv.R')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_group_mv.R')
library(highcharter)
runApp('test-mod_plots_group_mv.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_group_mv.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_group_mv.R')
obj <- Exp1_R25_prot
c(2:length(colnames(Biobase::pData(obj)))
c(2:length(colnames(Biobase::pData(obj))))
c(2:length(colnames(Biobase::pData(obj))))
palette
RColorBrewer::brewer.pal(8,"Dark2")
#tmp <- wrapper.mvHisto_HC(obj,palette=rv.prostar$settings()$examplePalette)
tmp <- wrapper.mvHisto_HC(obj,palette=RColorBrewer::brewer.pal(8,"Dark2"))
require(DAPARdata)
data('Exp1_R25_prot')
obj <- Exp1_R25_prot
wrapper.mvHisto_HC(obj,palette=RColorBrewer::brewer.pal(8,"Dark2"))
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_group_mv.R')
pData(obj)
Biobase::pData(obj)
RColorBrewer::brewer.pal(8,"Dark2")[1:nrow(Biobase::pData(obj))]
qData <- Biobase::pData(obj)
qData
nrow(qData)/unique(qData$Condition)
nrow(qData)
unique(length(qData$Condition))
nrow(qData)/length(unique(qData$Condition)))
nrow(qData)/length(unique(qData$Condition))
wrapper.mvHisto_HC(obj,palette=rep(RColorBrewer::brewer.pal(8,"Dark2")[1:nrow(qData)], each=nrow(qData)/length(unique(qData$Condition))))
rep(RColorBrewer::brewer.pal(8,"Dark2")[1:nrow(qData)], each=nrow(qData)/length(unique(qData$Condition)))
nrow(qData)/length(unique(qData$Condition))
RColorBrewer::brewer.pal(8,"Dark2")[1:nrow(qData)]
wrapper.mvHisto_HC(obj,palette=rep(RColorBrewer::brewer.pal(8,"Dark2")[1:length(unique(qData$Condition))], each=nrow(qData)/length(unique(qData$Condition))))
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_group_mv.R')
length(colnames(Biobase::pData(obj)))
setwd("~/Github/2.0/Prostar2/")
golem::add_module("plots_heatmap")
runApp('dev/test_dev/test-mod_plots_group_mv.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_heatmap.R')
runApp('test-mod_plots_heatmap.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_heatmap.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_heatmap.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
golem::add_module("plots_intensity")
runApp('dev/test_dev/test-mod_plots_intensity.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_intensity.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_intensity.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_intensity.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_intensity.R')
runApp('test-mod_plots_intensity.R')
getwd()
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
#Prostar2::run_app()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_intensity.R')
runApp('test-mod_plots_intensity.R')
