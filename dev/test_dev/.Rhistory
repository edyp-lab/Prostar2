separators
names(subliste)[i]
(separators %in% names(subliste)[i])
separators
(str_detect(names(subliste)[i], separators))
listeSepPLus
separators[str_detect(names(subliste)[i], separators)]
(separators %in% names(subliste)[i])
separators
names(subliste)[i]
intersect(separators,names(subliste)[i])
match(separators,names(subliste)[i])
class(separators)
class(names(subliste)[i])
intersect(strsplit("",separators),strsplit("",names(subliste)[i]))
strsplit("",names(subliste)[i])
intersect(strsplit(separators,""),strsplit(names(subliste)[i],""))
strsplit(names(subliste)[i],"")
strsplit(separators),"")
strsplit((separators),"")
unlist(strsplit((separators),""))
intersect(unlist(strsplit(separators,"")),strsplit(names(subliste)[i],""))
strsplit(names(subliste)[i],"")
intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],"")))
separators <- c(' ', '.', ",", ";", "-")
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
liste <- sapply(rv$tab1[,rv$widgets$Convert$convert_proteinId], function(x) strsplit(x, sepToCheck))
subliste
listeSepPLus <- c()
i=1
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
listeSepPLus
i=2
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
listeSepPLus
unique(listeSepPLus)
listeSepPLus <- c()
for (i in 1:length(subliste)){
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
}
listeSepPLus
(length(listeSepPLus)>0)
text <- paste0("<font color=\"red\"> Others separators (",unique(listeSepPLus), ") exist." )
text
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
listeSepPLus
unique(listeSepPLus)
data <- readExcel("~/data/Mock vs HIV 8 x 8 2018 ttt 2019 Uniq txt HYPOTHESIS..xlsx", sheet = "Quantitative Data")
data <- data$ID
sepToCheck
liste <- sapply(data, function(x) strsplit(x, sepToCheck))
liste
subliste <- liste[lengths(liste)>1]
subliste
listeSepPLus <- c()
for (i in 1:length(subliste)){
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
}
listeSepPLus
unique(listeSepPLus)
paste0("Others separators (",unique(listeSepPLus), ") found!" )
paste0("Others separators (",c(unique(listeSepPLus)), ") found!" )
listeSepPLus
unique(listeSepPLus)
class(unique(listeSepPLus))
unlist(unique(listeSepPLus))
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!" )
paste("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", sep = "")
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = T)
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = "")
paste("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = "")
cat("Others separators (",c(unlist(unique(listeSepPLus))), ") found!")
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
inputUser
inputUser
separators
separators <- c(' ', '.', ",", ";", "-")
inputUser <- "_"
(!(inputUser %in% separators))
(inputUser %in% separators)
inputUser
separators
if (!(inputUser %in% separators)) {
separators <- unique(c(separators,inputUser))
}
separators
inputUser <- ";"
(!(inputUser %in% separators))
separators <- separators[-which(inputUser == separators)]
separators
runApp('master/Prostar/inst/ProstarApp')
inputUser<- "_"
separators <- c(' ', '.', ",", ";", "-",'')
separators <- separators[-which(inputUser == separators)]
separators
separators
separators <- c(' ', '.', ",", ";", "-",'')
separators
separators <- separators[-which(inputUser == separators)]
separators
separators <- c(' ', '.', ",", ";", "-",'')
separators[-which(inputUser == separators)]
which(inputUser == separators)
separators
separators[-which(inputUser == separators)]
(which(inputUser == separators))
(length(which(inputUser == separators))>1)
inputUser<- "-"
separators <- c(' ', '.', ",", ";", "-",'')
(length(which(inputUser == separators))>1)
(length(which(inputUser == separators))>=1)
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
library(DAPAR)
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
datat <- data$Proteins
which(is.na(data))
data
data <- data$Proteins
which(is.na(data))
which(data == "")
which(data == " ")
rm(datat)
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
View(data)
which(is.na(data$Proteins))
length(index)
index <- which(is.na(data$Proteins)) # && which(data$Proteins == "")
length(index)
if (length(index)>0) {
paste0(length(index), "peptides don't have parent protein")
}
if (length(index)>0) {
paste0(length(index), " peptides don't have parent protein")
}
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shinydashboardPlusGallery()
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyjs)
library(shinyjqui)
library(sass)
library(shinyWidgets)
shinydashboardPlusGallery()
shinyWidgetsGallery()
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
library(DAPARdata)
library(MultiAssayExperiment)
source(file.path('~/Github/2.0/DAPAR/R/pipeline-template-class.R'), local = TRUE)$value
source(file.path('~/Github/2.0/DAPAR/R/peptide-pipeline-class.R'), local = TRUE)$value
# MAE
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
# obj <- new("PipelineTemplate",mae,
#            indexNA = indexNA,
#            PairwiseComparisons = PairwiseComparisons,
#            analysis=analysis,
#            pipelineType=pipelineType,
#            version = .version,
#            processes=c('original',processes)
# )
.version <- if (is.na(installed.packages()["Prostar"])) 'NA' else installed.packages()["Prostar",'Version']
pipelineType <- "PipelinePeptide"
processes <- c('original','filtered', 'aggregated', "normalized")
dat1 <- new("PipelineTemplate", mae ,
pipelineType=pipelineType,
version=.version,
processes=processes)
proteinID <- "Proteins"
template <- mae
matAdj <- BuildListAdjacencyMatrices(template[['original']], proteinID)
source(file.path('~/Github/2.0/DAPAR/R/agregation.R'), local = TRUE)$value
matAdj <- BuildListAdjacencyMatrices(template[['original']], proteinID)
library(DAPARdata)
library(MultiAssayExperiment)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
source(file.path('~/Github/2.0/DAPAR/R/pipeline-template-class.R'), local = TRUE)$value
# obj <- new("PipelineTemplate",mae,
#            indexNA = indexNA,
#            PairwiseComparisons = PairwiseComparisons,
#            analysis=analysis,
#            pipelineType=pipelineType,
#            version = .version,
#            processes=c('original',processes)
# )
.version <- if (is.na(installed.packages()["Prostar"])) 'NA' else installed.packages()["Prostar",'Version']
pipelineType <- "PipelinePeptide"
processes <- c('original','filtered', 'aggregated', "normalized")
dat1 <- new("PipelineTemplate", mae ,
pipelineType=pipelineType,
version=.version,
processes=processes)
proteinID <- "Proteins"
source(file.path('~/Github/2.0/DAPAR/R/agregation.R'), local = TRUE)$value
template <- mae
matAdj <- BuildListAdjacencyMatrices(template[['original']], proteinID)
template[['original']]
View(template)
matAdj <- BuildListAdjacencyMatrices('Exp1_R25_pept', proteinID)
matAdj <- BuildListAdjacencyMatrices(Exp1_R25_pept, proteinID)
View(mae)
matAdj <- BuildListAdjacencyMatrices(template@ExperimentList@listData$Exp1_R25_pept, proteinID)
cc <- ComputeConnexComposants(matAdj)
source(file.path('~/Github/master/Prostar/inst/ProstarApp/server/srv_Filtering.R'), local = TRUE)$value
ComputeConnexComposants <- reactive({
ll1 <- get.pep.prot.cc(rv$matAdj$matWithSharedPeptides)
ll2 <- get.pep.prot.cc(rv$matAdj$matWithUniquePeptides)
rv$CC <- list(allPep = ll1,
onlyUniquePep = ll2)
rv$CC
})
ComputeConnexComposants <- function(matAdj){
ll1 <- get.pep.prot.cc(matAdj$onlyShared)
ll2 <- get.pep.prot.cc(matAdj$onlySpec)
CC <- list(allPep = ll1,
onlyUniquePep = ll2)
return(CC)
}
cc <- ComputeConnexComposants(matAdj)
source(file.path('~/Github/2.0/DAPAR/R/get_pep_prot'), local = TRUE)$value
source(file.path('~/Github/2.0/DAPAR/R/get_pep_prot_cc.R'), local = TRUE)$value
ComputeConnexComposants <- function(matAdj){
ll1 <- get.pep.prot.cc(matAdj$onlyShared)
ll2 <- get.pep.prot.cc(matAdj$onlySpec)
CC <- list(allPep = ll1,
onlyUniquePep = ll2)
return(CC)
}
cc <- ComputeConnexComposants(matAdj)
library(installr)
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo=NULL, type ="source")
library(DAPAR)
library(DAPARdata)
library(Prostar)
library(DAPAR)
library(MultiAssayExperiment)
library(MSnbase)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
View(mae)
mae
names(experiments(mae))
msnsetList <- names(experiments(mae))
experiments(mae)[[ msnsetList[1] ]]
experiments(mae)[[ msnsetList[1] ]]
names(experiments(mae)[[ msnsetList[1] ]])
colData(mae)
rownames(colData(mae))
assays(mae)
assay(mae)
assay(mae)[2]
assay(mae)[3]
sampleMap(mae)
samplemap <- sampleMap(mae)
samplemap
View(samplemap)
rm(samplemap)
sampleMap(mae)
colData(mae)
metadata(mae)
rownames(mae)
colnames(mae)
source(file.path('~/Github/2.0/DAPAR/R/pipeline-template-class.R'), local = TRUE)$value
# obj <- new("PipelineTemplate",mae,
#            indexNA = indexNA,
#            PairwiseComparisons = PairwiseComparisons,
#            analysis=analysis,
#            pipelineType=pipelineType,
#            version = .version,
#            processes=c('original',processes)
# )
dat1 <- new("PipelineTemplate", mae ,
analysis="mae_creation",
pipelineType="PipelinePeptide",
version=installed.packages()["Prostar",'Version'],
processes=c('original','filtered', 'aggregated', "normalized"))
show(dat1)
library(DAPARdata)
library(Prostar)
library(DAPAR)
library(MultiAssayExperiment)
library(MSnbase)
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=data('Exp1_R25_pept'),
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
source(file.path('~/Github/2.0/DAPAR/R/pipeline-template-class.R'), local = TRUE)$value
# obj <- new("PipelineTemplate",mae,
#            indexNA = indexNA,
#            PairwiseComparisons = PairwiseComparisons,
#            analysis=analysis,
#            pipelineType=pipelineType,
#            version = .version,
#            processes=c('original',processes)
# )
dat1 <- new("PipelineTemplate", mae ,
analysis="mae_creation",
pipelineType="PipelinePeptide",
version=installed.packages()["Prostar",'Version'],
processes=c('original','filtered', 'aggregated', "normalized"))
show(dat1)
mae
obj <- Exp1_R2_prot
get(obj)
as.character(Exp1_R2_prot)
deparse(substitute(Exp1_R2_prot))
deparse(substitute(assays(mae)[1]))
assays(mae)[1]
names(assays(mae)[1])
deparse(substitute(names(assays(mae)[1])))
View(Exp2_R10_prot)
deparse(quote(names(assays(mae)[1])))
expinfo(Exp1_R2_pept)
exptitle(Exp1_R2_pept)
exptitle(Exp1_R2_pept) <- "Exp1_R25_pept"
msInfo(Exp1_R2_pept )
rownames(Exp1_R2_pept )
colnames(Exp1_R2_pept )
assign(Exp1_R25_pept)
library(shiny); runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_corr_matrix.R')
getwd()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
source("../../R","mod_plots_corr_matrix.R" )
source(file.path("../../R","mod_plots_corr_matrix.R"), local=TRUE)$value
runApp('test-mod_plots_corr_matrix.R')
library(highcharter)
library(DAPAR)
setwd("~/Github/2.0/Prostar2/")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
setwd("~/Github/2.0/Prostar2/dev/test_dev/")
library(shiny); runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
library(installr)
uninstall.packages("DAPAR")
uninstall.packages("DAPAR")
library(installr)
uninstall.packages("DAPAR")
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo = NULL, type="source")
library(shiny); runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
library(installr)
uninstall.packages("DAPAR")
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo=NULL, type= "source")
library(shiny); runApp('test-mod_plots_corr_matrix.R')
library(installr)
uninstall.packages("DAPAR")
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo=NULL, type= "source")
library(shiny); runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
library(DAPARdata)
library(Prostar)
library(DAPAR)
library(MultiAssayExperiment)
library(MSnbase)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
print(class(obj))
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_corr_matrix.R')
library(shiny); runApp('test-mod_plots_corr_matrix.R')
runApp('test-mod_plots_var_dist.R')
runApp('test-mod_plots_var_dist.R')
library(installr)
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo=NULL, type="source")
runApp('test-mod_plots_var_dist.R')
library(DAPAR)
library(shiny); runApp('test-mod_plots_var_dist.R')
runApp('test-mod_plots_var_dist.R')
runApp('test-mod_plots_var_dist.R')
runApp('test-mod_plots_var_dist.R')
library(DAPARdata)
library(Prostar)
library(DAPAR)
library(MultiAssayExperiment)
library(MSnbase)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
runApp('test-mod_plots_var_dist.R')
library(shiny); runApp('test-mod_plots_var_dist.R')
runApp('test-mod_plots_var_dist.R')
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
runApp('test-mod_plots_var_dist.R')
library(shiny); runApp('test-mod_plots_heatmap.R')
