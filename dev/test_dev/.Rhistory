text
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
listeSepPLus
unique(listeSepPLus)
data <- readExcel("~/data/Mock vs HIV 8 x 8 2018 ttt 2019 Uniq txt HYPOTHESIS..xlsx", sheet = "Quantitative Data")
data <- data$ID
sepToCheck
liste <- sapply(data, function(x) strsplit(x, sepToCheck))
liste
subliste <- liste[lengths(liste)>1]
subliste
listeSepPLus <- c()
for (i in 1:length(subliste)){
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
}
listeSepPLus
unique(listeSepPLus)
paste0("Others separators (",unique(listeSepPLus), ") found!" )
paste0("Others separators (",c(unique(listeSepPLus)), ") found!" )
listeSepPLus
unique(listeSepPLus)
class(unique(listeSepPLus))
unlist(unique(listeSepPLus))
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!" )
paste("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", sep = "")
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = T)
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = "")
paste("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = "")
cat("Others separators (",c(unlist(unique(listeSepPLus))), ") found!")
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
inputUser
inputUser
separators
separators <- c(' ', '.', ",", ";", "-")
inputUser <- "_"
(!(inputUser %in% separators))
(inputUser %in% separators)
inputUser
separators
if (!(inputUser %in% separators)) {
separators <- unique(c(separators,inputUser))
}
separators
inputUser <- ";"
(!(inputUser %in% separators))
separators <- separators[-which(inputUser == separators)]
separators
runApp('master/Prostar/inst/ProstarApp')
inputUser<- "_"
separators <- c(' ', '.', ",", ";", "-",'')
separators <- separators[-which(inputUser == separators)]
separators
separators
separators <- c(' ', '.', ",", ";", "-",'')
separators
separators <- separators[-which(inputUser == separators)]
separators
separators <- c(' ', '.', ",", ";", "-",'')
separators[-which(inputUser == separators)]
which(inputUser == separators)
separators
separators[-which(inputUser == separators)]
(which(inputUser == separators))
(length(which(inputUser == separators))>1)
inputUser<- "-"
separators <- c(' ', '.', ",", ";", "-",'')
(length(which(inputUser == separators))>1)
(length(which(inputUser == separators))>=1)
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
library(DAPAR)
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
datat <- data$Proteins
which(is.na(data))
data
data <- data$Proteins
which(is.na(data))
which(data == "")
which(data == " ")
rm(datat)
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
View(data)
which(is.na(data$Proteins))
length(index)
index <- which(is.na(data$Proteins)) # && which(data$Proteins == "")
length(index)
if (length(index)>0) {
paste0(length(index), "peptides don't have parent protein")
}
if (length(index)>0) {
paste0(length(index), " peptides don't have parent protein")
}
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shinydashboardPlusGallery()
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyjs)
library(shinyjqui)
library(sass)
library(shinyWidgets)
shinydashboardPlusGallery()
shinyWidgetsGallery()
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
library(DAPARdata)
library(MultiAssayExperiment)
source(file.path('~/Github/2.0/DAPAR/R/pipeline-template-class.R'), local = TRUE)$value
source(file.path('~/Github/2.0/DAPAR/R/peptide-pipeline-class.R'), local = TRUE)$value
# MAE
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
# obj <- new("PipelineTemplate",mae,
#            indexNA = indexNA,
#            PairwiseComparisons = PairwiseComparisons,
#            analysis=analysis,
#            pipelineType=pipelineType,
#            version = .version,
#            processes=c('original',processes)
# )
.version <- if (is.na(installed.packages()["Prostar"])) 'NA' else installed.packages()["Prostar",'Version']
pipelineType <- "PipelinePeptide"
processes <- c('original','filtered', 'aggregated', "normalized")
dat1 <- new("PipelineTemplate", mae ,
pipelineType=pipelineType,
version=.version,
processes=processes)
proteinID <- "Proteins"
template <- mae
matAdj <- BuildListAdjacencyMatrices(template[['original']], proteinID)
source(file.path('~/Github/2.0/DAPAR/R/agregation.R'), local = TRUE)$value
matAdj <- BuildListAdjacencyMatrices(template[['original']], proteinID)
library(DAPARdata)
library(MultiAssayExperiment)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
source(file.path('~/Github/2.0/DAPAR/R/pipeline-template-class.R'), local = TRUE)$value
# obj <- new("PipelineTemplate",mae,
#            indexNA = indexNA,
#            PairwiseComparisons = PairwiseComparisons,
#            analysis=analysis,
#            pipelineType=pipelineType,
#            version = .version,
#            processes=c('original',processes)
# )
.version <- if (is.na(installed.packages()["Prostar"])) 'NA' else installed.packages()["Prostar",'Version']
pipelineType <- "PipelinePeptide"
processes <- c('original','filtered', 'aggregated', "normalized")
dat1 <- new("PipelineTemplate", mae ,
pipelineType=pipelineType,
version=.version,
processes=processes)
proteinID <- "Proteins"
source(file.path('~/Github/2.0/DAPAR/R/agregation.R'), local = TRUE)$value
template <- mae
matAdj <- BuildListAdjacencyMatrices(template[['original']], proteinID)
template[['original']]
View(template)
matAdj <- BuildListAdjacencyMatrices('Exp1_R25_pept', proteinID)
matAdj <- BuildListAdjacencyMatrices(Exp1_R25_pept, proteinID)
View(mae)
matAdj <- BuildListAdjacencyMatrices(template@ExperimentList@listData$Exp1_R25_pept, proteinID)
cc <- ComputeConnexComposants(matAdj)
source(file.path('~/Github/master/Prostar/inst/ProstarApp/server/srv_Filtering.R'), local = TRUE)$value
ComputeConnexComposants <- reactive({
ll1 <- get.pep.prot.cc(rv$matAdj$matWithSharedPeptides)
ll2 <- get.pep.prot.cc(rv$matAdj$matWithUniquePeptides)
rv$CC <- list(allPep = ll1,
onlyUniquePep = ll2)
rv$CC
})
ComputeConnexComposants <- function(matAdj){
ll1 <- get.pep.prot.cc(matAdj$onlyShared)
ll2 <- get.pep.prot.cc(matAdj$onlySpec)
CC <- list(allPep = ll1,
onlyUniquePep = ll2)
return(CC)
}
cc <- ComputeConnexComposants(matAdj)
source(file.path('~/Github/2.0/DAPAR/R/get_pep_prot'), local = TRUE)$value
source(file.path('~/Github/2.0/DAPAR/R/get_pep_prot_cc.R'), local = TRUE)$value
ComputeConnexComposants <- function(matAdj){
ll1 <- get.pep.prot.cc(matAdj$onlyShared)
ll2 <- get.pep.prot.cc(matAdj$onlySpec)
CC <- list(allPep = ll1,
onlyUniquePep = ll2)
return(CC)
}
cc <- ComputeConnexComposants(matAdj)
library(installr)
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo=NULL, type ="source")
library(DAPAR)
install.packages("~/Github/2.0/DAPAR_2.0.tar.gz", repo=NULL, type="source")
library(shiny); runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
library(DAPARdata)
library(Prostar)
library(DAPAR)
library(MultiAssayExperiment)
library(MSnbase)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
library(DAPARdata)
library(Prostar)
library(DAPAR)
library(MultiAssayExperiment)
library(MSnbase)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
library(shiny); runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_heatmap.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_legend_colored_exprs.R')
library(shiny); runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_legend_colored_exprs.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_legend_colored_exprs.R')
library(shiny); runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_legend_colored_exprs.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
library(shiny); runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
getwd()
runApp('2.0/Prostar2/dev/test_dev/test-mod_plots_group_mv.R')
setwd("2.0/Prostar2/dev/test_dev/")
runApp('test-mod_plots_group_mv.R')
runApp('test-mod_plots_density.R')
library(shiny); runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
library(shiny); runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
library(DAPARdata)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
mae
library(shiny); runApp('test-mod_plots_density.R')
runApp('test-mod_plots_density.R')
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
source(file.path("../../R","mod_plots_msnset_explorer.R"), local=TRUE)$value
runApp('test-mod_plots_msnset_explorer.R')
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
getwd()
setwd("../../")
getwd()
runApp('dev/test_dev/test-mod_plots_msnset_explorer.R')
runApp('dev/test_dev/test-mod_plots_msnset_explorer.R')
source(file.path("../../R","mod_plots_legend_colored_exprs.R"), local=TRUE)$value
source(file.path("../../R","mod_plots_msnset_explorer.R"), local=TRUE)$value
setwd("dev/test_dev/")
source(file.path("../../R","mod_plots_msnset_explorer.R"), local=TRUE)$value
source(file.path("../../R","mod_plots_legend_colored_exprs.R"), local=TRUE)$value
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
source(file.path("../../R","mod_plots_msnset_explorer.R"), local=TRUE)$value
source(file.path("../../R","mod_plots_legend_colored_exprs.R"), local=TRUE)$value
runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
library(dplyr)
library(DT)
source(file.path("../../R","mod_plots_msnset_explorer.R"), local=TRUE)$value
source(file.path("../../R","mod_plots_legend_colored_exprs.R"), local=TRUE)$value
ui <- fluidPage(
mod_plots_msnset_explorer_ui('msnset_explorer')
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output, session) {
require(DAPARdata)
data('Exp1_R25_prot')
callModule(mod_plots_msnset_explorer_server,'msnset_explorer', obj = Exp1_R25_prot)
#callModule(mod_plots_msnset_explorer_server,'msnset_explorer', obj = NULL)
#callModule(mod_plots_msnset_explorer_server,'msnset_explorer', obj = mae)
}
shinyApp(ui, server)
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
library(DAPARdata)
data('Exp1_R25_pept')
data('Exp1_R2_pept')
data('Exp1_R2_prot')
data('Exp2_R10_prot')
mae <- MultiAssayExperiment::MultiAssayExperiment(experiments = list("Exp1_R25_pept"=Exp1_R25_pept,
"Exp1_R2_pept"=Exp1_R2_pept,
"Exp1_R2_prot"=Exp1_R2_prot,
"Exp2_R10_prot"=Exp2_R10_prot))
library(shiny); runApp('test-mod_plots_msnset_explorer.R')
runApp('test-mod_plots_msnset_explorer.R')
library(DAPARdata)
data('Exp1_R2_prot')
obj <- Exp1_R2_prot
obj@experimentData@other$typeOfData
obj@experimentData@other$OriginOfValues
View(obj)
obj
experimentData(obj)
Biobase::experimentData(obj)
data <- Biobase::experimentData(obj)
Biobase::experimentData(obj)@other$typeOfData
msInfo(obj)
Biobase::msInfo(obj)
MSnbase::msInfo(obj)
dim(obj)
fileNames(obj)
MSnbase::fileNames(obj)
processingData(obj)
library(MSnbase)
processingData(obj)
library(shiny); runApp('test-mod_format_DT.R')
library(shiny); runApp('test-mod_format_DT.R')
runApp('test-mod_format_DT.R')
runApp('test-mod_format_DT.R')
runApp('test-mod_format_DT.R')
runApp('test-mod_format_DT.R')
runApp('test-mod_format_DT.R')
runApp('test-mod_format_DT.R')
library(shiny); runApp('test-mod_format_DT.R')
library(shiny); runApp('test-mod_format_DT.R')
library(golem)
golem::add_module("plots_tracking")
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
library(shiny); runApp('test-mod_plots_tracking.R')
observe({
reset()
print("In track module =RESET observe")
print(reset())
if (reset() > 0) {
updateSelectInput(session, "typeSelect", selected="None")
updateSelectInput(session, "listSelect", NULL)
updateSelectInput(session, "randSelect", selected="1")
updateSelectInput(session, "colSelect", selected=NULL)
}
})
observe({
params()
updateSelectInput(session, "typeSelect", selected=params()$type)
updateSelectInput(session, "listSelect", selected=params()$list)
updateSelectInput(session, "randSelect", selected=params()$rand)
updateSelectInput(session, "colSelect", selected=params()$col)
})
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
library(shiny); runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
library(shiny); runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
runApp('test-mod_plots_tracking.R')
source(file.path(".", "modules/Plots/moduleCorrMatrix.R"), local = TRUE)$value
install.packages('rstudioapi')
install.packages("rstudioapi")
rstudioapi::getThemes()
library(rstudioapi)
rstudioapi::getThemes()
getThemes()
library(rstudioapi)
rstudioapi::getThemes()
source(file.path("../../R/Drafts/","module_plots.R"), local=TRUE)$value
ui <- fluidPage(
modulePlotsUI('plots')
)
library(shiny)
ui <- fluidPage(
modulePlotsUI('plots')
)
server <- function(input, output, session) {
require(DAPARdata)
data('Exp1_R25_prot')
callModule(modulePlots,'plots', dataIn = Exp1_R25_prot, llPlots = NULL)
# callModule(modulePlots,'plots', dataIn = NULL, llPlots = NULL)
}
shinyApp(ui, server)
